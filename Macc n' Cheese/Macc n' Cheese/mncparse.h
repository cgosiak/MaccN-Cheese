// MACC_N_CHEESE Grammar 2016
// 
// Parser Class Definition File

// SHELL GENERATED BY PARSERGEN VERSION 5.0.3

#ifndef PARSER
#define PARSER

#include <string>
using namespace std;

#include "mncscan.h" // scanner class definition

#include "mnccode.h" // code generator class definition

class Parser
{
public:

	Parser();

	void SystemGoal();

private:

	Token savedToken;
	bool  tokenAvailable;

	void SyntaxError(Token t, string msg);

	Token NextToken();

	void Match(Token t);

	void InitTail();

	void VarDecTail(ExprRec& expr);

	void VarDecList(ExprRec& expr);

	void DecTail();

	void Declaration();

	void DecList();

	void BoolLit();

	void CheeseTypeTail();

	void CheeseType();

	void Type(ExprRec& expr);

	void Literal();

	void MultOp();

	void FactorTail(ExprRec& expr);

	void Primary(ExprRec& expr);

	void AddOp();

	void ExprTail(ExprRec& expr);

	void Factor(ExprRec& expr);

	void RelOp();

	void CondTail(OpRec& op, ExprRec& expr);

	void IntListTail();

	void IntList();

	void CaseListTail();

	void Case();

	void CaseList();

	void ForAssign();

	void ElseClause();

	void Condition(ExprRec& expr);

	void VarDecs();

	void SelectStmt();

	void ForStmt();

	void WhileStmt();

	void LoopStmt();

	void IfStmt();

	void ItemListTail(ExprRec& expr);

	void ItemList();

	void VariableTail();

	void VarListTail(ExprRec& expr);

	void VarList(ExprRec& expr);

	void InitList();

	void Expression(ExprRec& expr);

	void AssignTail(ExprRec& expr);

	void Variable(ExprRec& expr);

	void BreakStmt();

	void ShoutStmt(ExprRec& expr);

	void ListenStmt(ExprRec& expr);

	void AssignStmt();

	void StructStmt();

	void SimpleStmt(ExprRec& expr);

	void StmtTail();

	void Statement();

	void StmtList();

	void Program();

}; // end of Parser class

#endif

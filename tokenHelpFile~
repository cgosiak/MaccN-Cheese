if (tokenBuffer == "$eof$") return EOF_SYM;
if (tokenBuffer == "BOOL") return BOOL_SYM;
if (tokenBuffer == "BREAK") return BREAK_SYM;
if (tokenBuffer == "CASE") return CASE_SYM;
if (tokenBuffer == "CHEESE") return CHEESE_SYM;
if (tokenBuffer == "DECS") return DECS_SYM;
if (tokenBuffer == "DO") return DO_SYM;
if (tokenBuffer == "ELSE") return ELSE_SYM;
if (tokenBuffer == "END") return END_SYM;
if (tokenBuffer == "FALSE") return FALSE_SYM;
if (tokenBuffer == "FLOAT") return FLOAT_SYM;
if (tokenBuffer == "FOR") return FOR_SYM;
if (tokenBuffer == "HIPHIP") return HIPHIP_SYM;
if (tokenBuffer == "IF") return IF_SYM;
if (tokenBuffer == "INT") return INT_SYM;
if (tokenBuffer == "LISTEN") return LISTEN_SYM;
if (tokenBuffer == "OTHERWISE") return OTHERWISE_SYM;
if (tokenBuffer == "SELECT") return SELECT_SYM;
if (tokenBuffer == "SHOUT") return SHOUT_SYM;
if (tokenBuffer == "THEN") return THEN_SYM;
if (tokenBuffer == "TRUE") return TRUE_SYM;
if (tokenBuffer == "WHILE") return WHILE_SYM;
"["                 LSTAPLE; 	-done
"]"                 RSTAPLE; 	-done
"("                 LBANANA; 	-done
")"                 RBANANA;	-done
"{"                 LMUSTACHE;	-done
"}"                 RMUSTACHE; 	-done
":"                 COLON;
";"                 SEMICOLON;
","                 COMMA;
"="                 ASSIGN_OP;
"+"                 PLUS_OP; 
"-"                 MINUS_OP;
"*"                 MULT_OP;
"/"                 DIV_OP;
"<"                 LT_OP;
"<="                LE_OP;
">"                 GT_OP;
">="                GE_OP;
"=="                EQ_OP1;
"!!"                EQ_OP2;
"!="                NE_OP;
"ID"                ID;
"BOOL_LIT"          BOOL_LIT;
"INT_LIT"           INT_LIT;
"FLOAT_LIT"         FLOAT_LIT;
"CHEESE_LIT"        CHEESE_LIT;
